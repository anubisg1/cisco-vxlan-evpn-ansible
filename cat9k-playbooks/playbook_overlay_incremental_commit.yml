---
- name: Write DAG incremental info to files in host_vars/inc_vars folder
  ansible.builtin.import_playbook: playbook_overlay_incremental_generate.yml

- name: Automated VXLAN deployment with BGP EVPN L2/L3 underlay w/ Spine
  hosts: all
  gather_facts: false
  vars:
    incremental_run: false
    vrf_dict:
      './templates/vrf_definition.j2': 'vrf block'
      './templates/bgp_l2vpn_ipv46_per_vrf.j2': 'bgp l2vpn ipv46 per vrf block'
      './templates/vrf_vlan_create.j2': 'vlan block'
      './templates/vrf_evi_vni_vlan_stiching.j2': 'vrf evi vni vlan stiching block'
      './templates/vrf_nve_vni_assign.j2': 'vrf nve vni assign block'
      './templates/vrf_svi_create.j2': 'vrf svi create block'
    vlan_dict:
      './templates/vlan_create.j2': 'vlan block'
      './templates/evi_vni_vlan_stiching.j2': 'evi vni vlan stiching block'
      './templates/nve_vni_assign.j2': 'nve vni assign block'
    svi_dict:
      './templates/svi_create.j2': 'svi create block'
    overlay_intf_dict:
      './templates/overlay_interfaces.j2': 'overlay interfaces block'

  tasks:
    # Set db file path and load overlay_inc vars
    - name: Load and process underlay input file # noqa: run-once[task]
      run_once: true
      block:
        - name: Set underlay vars input file path if not already set
          when: input_vars_path is not defined
          ansible.builtin.set_fact:
            input_vars_path: "../"

        - name: Load vars from overlay input file
          ansible.builtin.include_vars:
            file: "{{ input_vars_path }}group_vars/overlay_db.yml"

        - name: Load vars from underlay input file
          ansible.builtin.include_vars:
            file: "{{ input_vars_path }}group_vars/underlay_db.yml"


    - name: Load vars from node_vars/<host>.yml input file
      ansible.builtin.include_vars:
        file: "{{ input_vars_path }}host_vars/node_vars/{{ inventory_hostname }}.yml"

    - name: Check whether host_vars/inc_vars/<inventory_hostname>.yml is present
      delegate_to: localhost
      ansible.builtin.stat:
        path: "{{ input_vars_path }}host_vars/inc_vars/{{ inventory_hostname }}.yml"
      register: file_state
      become: false

    - name: Executing tasks if host_vars/inc_vars/<inventory_hostname>.yml is present
      when: file_state.stat.exists and inventory_hostname in groups['leaf']
      block:
        - name: Load variables from files under host_vars/inc_vars folder
          ansible.builtin.include_vars:
            file: "{{ input_vars_path }}host_vars/inc_vars/{{ inventory_hostname }}.yml"

    - name: Check if full execution is needed
      ansible.builtin.set_fact:
        incremental_run: true
      when: (vrf_cli is defined) or (vlan_cli is defined) or (svi_cli is defined) or (ovrl_intf_cli is defined)

    - name: VRF configuration
      when: (inventory_hostname in groups['leaf']) and ((incremental_run and vrf_cli is defined))
      ansible.netcommon.cli_config:
        config: " {{ lookup('template', item.key) }} "
        diff_match: none
      register: result
      with_dict: "{{ vrf_dict }}"

    - name: VLAN configuration
      when: (inventory_hostname in groups['leaf']) and ((incremental_run and vlan_cli is defined))
      ansible.netcommon.cli_config:
        config: " {{ lookup('template', item.key) }} "
        diff_match: none
      register: result
      with_dict: "{{ vlan_dict }}"

    - name: SVI configuration
      when: (inventory_hostname in groups['leaf']) and ((incremental_run and svi_cli is defined))
      ansible.netcommon.cli_config:
        config: " {{ lookup('template', item.key) }} "
        diff_match: none
      register: result
      with_dict: "{{ svi_dict }}"

    - name: Overlay interface configuration
      when: (inventory_hostname in groups['leaf']) and ((incremental_run and ovrl_intf_cli is defined))
      ansible.netcommon.cli_config:
        config: " {{ lookup('template', item.key) }} "
        diff_match: none
      register: result
      with_dict: "{{ overlay_intf_dict }}"

    - name: Pause for 60 seconds for convergence
      ansible.builtin.wait_for:
        delay: 60
        timeout: 0
      when: not incremental_run
