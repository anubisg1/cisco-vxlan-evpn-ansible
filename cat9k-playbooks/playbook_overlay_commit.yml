---

- name: Automated VXLAN deployment with BGP EVPN L2/L3 underlay w/ Spine
  hosts: all
  gather_facts: false
  vars:
    save_configuration: true

  tasks:

          # Set db file path and load overlay_db
          - name: Load and process overlay input file
            run_once: true
            block:
            - name: set overlay db input file path if not already set
              when: input_vars_path is not defined
              set_fact: 
                input_vars_path: "../"

            - name: Load vars from overlay input file
              include_vars: 
                file: "{{ input_vars_path }}group_vars/overlay_db.yml"

            - name: Load vars from underlay input file
              include_vars: 
                file: "{{ input_vars_path }}group_vars/underlay_db.yml"

          - name: Load vars from node_vars/<host>.yml input file
            include_vars: 
              file: "{{ input_vars_path }}host_vars/node_vars/{{ inventory_hostname }}.yml"

          - name: Configure vrf definition
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', './templates/vrf_definition.j2') }}"
              diff_match: none 
            register: result
          
          - name: Activate BGP for AF(ipv4/ipv6) per vrf
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', './templates/bgp_l2vpn_ipv46_per_vrf.j2') }}"
              diff_match: none
            register: result

          - name: Create Core VRF VLAN
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', './templates/vrf_vlan_create.j2') }}"
              diff_match: none 
            register: result

          - name: Create Core VRF SVI
            when: inventory_hostname in groups['leaf'] 
            cli_config:
              config: "{{ lookup('template', './templates/vrf_svi_create.j2') }}"
              diff_match: none 
            register: result            

          - name: Stitch VRF EVI/VNI/VLAN
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', './templates/vrf_evi_vni_vlan_stiching.j2') }}"
              diff_match: none 
            register: result

          - name: Configure NVE interface for the VRF 
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', './templates/vrf_nve_vni_assign.j2') }}"
              diff_match: none 
            register: result

          - name: Create access VLAN
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', './templates/vlan_create.j2') }}"
              diff_match: none 
            register: result

          - name: Create SVI
            when: inventory_hostname in groups['leaf'] 
            cli_config:
              config: "{{ lookup('template', './templates/svi_create.j2') }}"
              diff_match: none 
            register: result            

          - name: Stitch EVI/VNI/VLAN
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', './templates/evi_vni_vlan_stiching.j2') }}"
              diff_match: none 
            register: result

          - name: Create overlay interface
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', './templates/overlay_interfaces.j2') }}"
              diff_match: none 
            register: result
          
          - name: Configure NVE interface
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', './templates/nve_vni_assign.j2') }}"
              diff_match: none 
            register: result

          - name: Pause for 60 seconds for convergence  
            wait_for:
              delay: 60
              timeout: 0
          
          - name: Save the configurations in the device
            when: save_configuration
            cli_command:
              command: write mem
            register: result
